{{- if .Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1beta1"}}

---
kind: ClusterRole
apiVersion: {{.Values.cr_api_version}}
metadata:
  name: {{.Values.cr_name}}
  labels:
    component: {{.Values.cr_component}}
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods"]
  verbs: ["get", "watch", "list"]

---
kind: ClusterRoleBinding
apiVersion: {{.Values.crb_api_version}}
metadata:
  name: {{.Values.crb_name}}
  labels:
    component: {{.Values.crb_component}}
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
subjects:
- kind: ServiceAccount
  name: {{.Values.sa_name}}
  namespace: {{.Values.sa_namespace}}
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: {{.Values.cr_name}}
  apiGroup: ""

{{- end}}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.Values.sa_name}}
  namespace: {{.Values.sa_namespace}}
  labels:
    component: {{.Values.sa_component}}
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{.Values.name}}
  namespace: {{.Values.namespace}}
  labels:
    app: {{.Values.app}}
    component: {{.Values.component}}
spec:
  template:
    metadata:
      labels:
        k8s: {{.Values.k8s}}
        component: {{.Values.component}}
        version: v1
        kubernetes.io/cluster-service: "true"
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: {{.Values.service_account_name}}
      containers:
      - name: {{.Values.fluentd_container_name}}
        image: {{.Values.fluentd_image}}
        resources:
          limits:
            memory: {{.Values.memory_limits}}
          requests:
            cpu: {{.Values.cpu_requests}}
            memory: {{.Values.memory_requests}}
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      - name: {{.Values.sidecar_container_name}}
        image: {{.Values.logrotate_image}}
        env:
          - name: ALLAPPLICATIONLOGS
            value: '/var/log/containers'
        volumeMounts:
        - name: varlog
          mountPath: /var/log/
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      {{- if .Values.tolerations }}
      tolerations:
      {{ toYaml .Values.tolerations | indent 8 }}
      {{- end}}
